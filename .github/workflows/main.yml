name: üöÄ Build & Deploy FreakMe.Fun to DockerHub + Run Container

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: tolanicorpdev/freakme.fun
  CONTAINER_NAME: freakme-fun
  PORT: 5000
  SENTRY_PROJECT: freakme_fun
  SENTRY_ORG: tolani-crop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: üßæ Checkout Code
      uses: actions/checkout@v3

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest coverage

    - name: üß™ Run Tests
      run: |
        pytest --cov=./ --cov-report=xml

    - name: üìä Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: üîç Set up Sentry CLI
      uses: getsentry/action-setup-cli@v1
      with:
        version: latest

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: üîê DockerHub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üèóÔ∏è Build & Push Docker Image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.IMAGE_NAME }}:latest
        cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:latest
        cache-to: type=inline
        build-args: |
          SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG=${{ env.SENTRY_ORG }}
          SENTRY_PROJECT=${{ env.SENTRY_PROJECT }}

    - name: üìù Create Sentry Release
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ env.SENTRY_ORG }}
      run: |
        sentry-cli releases new -p ${{ env.SENTRY_PROJECT }} ${{ github.sha }}
        sentry-cli releases set-commits --auto ${{ github.sha }}
        sentry-cli releases finalize ${{ github.sha }}

    - name: üöÄ Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          docker pull ${{ env.IMAGE_NAME }}:latest
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm ${{ env.CONTAINER_NAME }} || true
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.PORT }}:${{ env.PORT }} \
            -e SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN }} \
            -e NODE_ENV=production \
            --restart unless-stopped \
            ${{ env.IMAGE_NAME }}:latest
          docker system prune -af

    - name: üîç Verify Deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          if ! docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
            echo "‚ùå Container is not running!"
            exit 1
          fi
          echo "‚úÖ Container is running successfully"
          
    - name: üì¢ Send Deployment Notification
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: good
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: 'FreakMe.Fun successfully deployed to production :rocket:'
        SLACK_TITLE: Deployment Success
        SLACK_USERNAME: GitHub Actions

    - name: ‚úÖ Deploy Complete
      run: echo "üéâ FreakMe.Fun deployed and running at https://freakme-fun.onrender.com"
